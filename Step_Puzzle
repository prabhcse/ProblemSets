// declared as Class variable
static ArrayList<Integer> path = new ArrayList<Integer>();

public static boolean step_puzzle(ArrayList<String> input, String match, int i, int j)
	{
		boolean ret = false;
		if(i < 0 || j < 0 || i == input.size() || j == input.get(i).length())
		{
			ret = false;
		}
		// Check for char match
		else
		{
			if(!match.isEmpty())
			{
				ArrayList<Integer> turn = new ArrayList<Integer>();
				turn.add(1); turn.add(2); turn.add(3); turn.add(4);
				for(int it = 0; it < path.size(); it+=2)				// Check for already visited
				{
					if(i == path.get(it) && j == path.get(it+1))
					{
						return false;
					}
				}
				// Check for Match Character
				if(input.get(i).charAt(j) == match.charAt(0))
				{
					path.add(i); path.add(j);			// add to found path TILL NOW 
					// Make sure match is non-empty or single char
					if(match.length() == 1)
					{
						match = new String();
					}
					else
					{
						String tt = match.substring(1);		// rest of the string
						match = tt;
					}
					
					if(match.isEmpty())				// Match Complete
					{
//						return true;				// comment out, to return result for found match even if corner not reached	
						
						if( i == (input.size()-1) && j == (input.get(i).length()-1) )	// reached bottom,right corner
						{
							return true;
						}
						else															// corner not reached
						{
							// Need to remove added (i,j)
							int psize = path.size();
							path.remove(psize-1); path.remove(psize-2);
							return false;
						}
						
					}
					
					int it = 0;
					while(it < turn.size())
					{
						if(turn.get(it) == 1)	// Up
						{
							ret = step_puzzle(input, match, i-1, j);
						}
						else if(turn.get(it) == 2)	// Right
						{
							ret = step_puzzle(input, match, i, j+1);
						}
						else if(turn.get(it) == 3)	//Down
						{
							ret = step_puzzle(input, match, i+1, j);	
						}
						else if(turn.get(it) == 4)	// Left
						{
							ret = step_puzzle(input, match, i, j-1);
						}
						else
						{
							System.out.println("\n ERROR : turn out of bound.");
						}
						// found match by sub searches
						if(ret)
						{
							break;
						}
						it++;
					}
					// None of the turns matched
					if(!ret)
					{
						int psize = path.size();
						path.remove(psize-1); path.remove(psize-2);
					}
				}
			}					// if (match is not empty)
			else
			{
				ret = false;			// Useful - when length of match is small.
			}
			
		}
		
		return ret;
	}
